<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Login & Signup</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .auth-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            padding: 40px;
            width: 100%;
            max-width: 420px;
            transform: translateY(20px);
            opacity: 0;
            animation: slideUp 0.8s ease forwards;
            position: relative;
            overflow: hidden;
        }

        @keyframes slideUp {
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .form-container {
            position: relative;
            width: 100%;
        }

        .form-panel {
            transition: all 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            opacity: 1;
            transform: translateX(0);
        }

        .form-panel.slide-out-left {
            opacity: 0;
            transform: translateX(-100%);
        }

        .form-panel.slide-out-right {
            opacity: 0;
            transform: translateX(100%);
        }

        .form-panel.slide-in-left {
            opacity: 0;
            transform: translateX(-100%);
            animation: slideInLeft 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
        }

        .form-panel.slide-in-right {
            opacity: 0;
            transform: translateX(100%);
            animation: slideInRight 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
        }

        @keyframes slideInLeft {
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes slideInRight {
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .signup-panel {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            opacity: 0;
            transform: translateX(100%);
            pointer-events: none;
        }

        .signup-panel.active {
            position: relative;
            opacity: 1;
            transform: translateX(0);
            pointer-events: auto;
        }

        .logo {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo h1 {
            color: white;
            font-size: 2rem;
            font-weight: 300;
            margin-bottom: 5px;
            transition: all 0.3s ease;
        }

        .logo p {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .form-group {
            position: relative;
            margin-bottom: 20px;
        }

        .form-input {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 16px;
            transition: all 0.3s ease;
            outline: none;
        }

        .form-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .form-input:focus {
            border-color: #667eea;
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-2px);
            box-shadow: 0 5px 20px rgba(102, 126, 234, 0.3);
        }

        .password-container {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.6);
            cursor: pointer;
            font-size: 18px;
            transition: color 0.3s ease;
        }

        .toggle-password:hover {
            color: white;
        }

        .error-message {
            color: #ff6b6b;
            font-size: 0.85rem;
            margin-top: 5px;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s ease;
        }

        .error-message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .password-strength {
            margin-top: 8px;
            font-size: 0.85rem;
        }

        .strength-bar {
            height: 3px;
            border-radius: 2px;
            background: rgba(255, 255, 255, 0.2);
            margin: 5px 0;
            overflow: hidden;
        }

        .strength-fill {
            height: 100%;
            width: 0%;
            border-radius: 2px;
            transition: all 0.3s ease;
        }

        .strength-weak .strength-fill {
            width: 33%;
            background: #ff6b6b;
        }

        .strength-medium .strength-fill {
            width: 66%;
            background: #ffa726;
        }

        .strength-strong .strength-fill {
            width: 100%;
            background: #4caf50;
        }

        .strength-text {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.8rem;
        }

        .remember-forgot {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .checkbox-container {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .custom-checkbox {
            width: 18px;
            height: 18px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 4px;
            position: relative;
            cursor: pointer;
        }

        .custom-checkbox input {
            opacity: 0;
            position: absolute;
        }

        .custom-checkbox input:checked + .checkmark {
            background: #667eea;
            border-color: #667eea;
        }

        .custom-checkbox input:checked + .checkmark::after {
            opacity: 1;
            transform: rotate(45deg) scale(1);
        }

        .checkmark {
            position: absolute;
            top: 0;
            left: 0;
            height: 18px;
            width: 18px;
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        .checkmark::after {
            content: "";
            position: absolute;
            left: 5px;
            top: 1px;
            width: 4px;
            height: 8px;
            border: solid white;
            border-width: 0 2px 2px 0;
            opacity: 0;
            transform: rotate(45deg) scale(0.5);
            transition: all 0.3s ease;
        }

        .remember-text {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
            cursor: pointer;
        }

        .forgot-password {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            font-size: 0.9rem;
            transition: color 0.3s ease;
        }

        .forgot-password:hover {
            color: white;
        }

        .auth-btn {
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 10px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            margin-bottom: 20px;
        }

        .auth-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .auth-btn:active {
            transform: translateY(0);
        }

        .auth-btn.loading {
            pointer-events: none;
        }

        .btn-text {
            transition: opacity 0.3s ease;
        }

        .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            opacity: 0;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }

        .auth-btn.loading .btn-text {
            opacity: 0;
        }

        .auth-btn.loading .loading-spinner {
            opacity: 1;
        }

        .divider {
            text-align: center;
            margin: 20px 0;
            position: relative;
        }

        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: rgba(255, 255, 255, 0.2);
        }

        .divider span {
            background: rgba(255, 255, 255, 0.1);
            padding: 0 15px;
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
        }

        .social-login {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .social-btn {
            flex: 1;
            padding: 12px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .social-btn:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-2px);
        }

        .switch-form {
            text-align: center;
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .switch-form button {
            color: white;
            background: none;
            border: none;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            padding: 2px 4px;
            border-radius: 4px;
        }

        .switch-form button:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-1px);
        }

        .success-message {
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid rgba(76, 175, 80, 0.3);
            color: #4caf50;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s ease;
        }

        .success-message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .name-group {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .name-group .form-group {
            margin-bottom: 0;
            flex: 1;
        }

        .terms-container {
            margin-bottom: 25px;
        }

        .terms-text {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.85rem;
            line-height: 1.5;
        }

        .terms-text a {
            color: white;
            text-decoration: none;
        }

        .terms-text a:hover {
            text-decoration: underline;
        }

        @media (max-width: 480px) {
            .auth-container {
                padding: 30px 20px;
            }

            .social-login {
                flex-direction: column;
            }

            .name-group {
                flex-direction: column;
                gap: 0;
            }

            .name-group .form-group {
                margin-bottom: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div class="form-container">
            <!-- Login Panel -->
            <div id="loginPanel" class="form-panel">
                <div class="logo">
                    <h1>Welcome Back</h1>
                    <p>Sign in to your account</p>
                </div>

                <div id="login-success-message" class="success-message">
                    Login successful! Redirecting...
                </div>

                <form id="loginForm">
                    <div class="form-group">
                        <input type="email" id="loginEmail" class="form-input" placeholder="Email address" required>
                        <div id="login-email-error" class="error-message">Please enter a valid email address</div>
                    </div>

                    <div class="form-group">
                        <div class="password-container">
                            <input type="password" id="loginPassword" class="form-input" placeholder="Password" required>
                            <button type="button" class="toggle-password" id="toggleLoginPassword">👁️</button>
                        </div>
                        <div id="login-password-error" class="error-message">Password must be at least 6 characters</div>
                    </div>

                    <div class="remember-forgot">
                        <div class="checkbox-container">
                            <div class="custom-checkbox">
                                <input type="checkbox" id="remember">
                                <span class="checkmark"></span>
                            </div>
                            <label for="remember" class="remember-text">Remember me</label>
                        </div>
                        <a href="#" class="forgot-password">Forgot password?</a>
                    </div>

                    <button type="submit" class="auth-btn" id="loginBtn">
                        <span class="btn-text">Sign In</span>
                        <div class="loading-spinner"></div>
                    </button>
                </form>

                <div class="divider">
                    <span>or continue with</span>
                </div>

                <div class="social-login">
                    <button class="social-btn" id="googleLoginBtn">
                        <span>📧</span>
                        <span>Google</span>
                    </button>
                    <button class="social-btn" id="facebookLoginBtn">
                        <span>📘</span>
                        <span>Facebook</span>
                    </button>
                </div>

                <div class="switch-form">
                    Don't have an account? <button type="button" id="showSignup">Sign up</button>
                </div>
            </div>

            <!-- Signup Panel -->
            <div id="signupPanel" class="form-panel signup-panel">
                <div class="logo">
                    <h1>Create Account</h1>
                    <p>Join us today</p>
                </div>

                <div id="signup-success-message" class="success-message">
                    Account created successfully! Please check your email.
                </div>

                <form id="signupForm">
                    <div class="name-group">
                        <div class="form-group">
                            <input type="text" id="firstName" class="form-input" placeholder="First name" required>
                            <div id="firstName-error" class="error-message">First name is required</div>
                        </div>
                        <div class="form-group">
                            <input type="text" id="lastName" class="form-input" placeholder="Last name" required>
                            <div id="lastName-error" class="error-message">Last name is required</div>
                        </div>
                    </div>

                    <div class="form-group">
                        <input type="email" id="signupEmail" class="form-input" placeholder="Email address" required>
                        <div id="signup-email-error" class="error-message">Please enter a valid email address</div>
                    </div>

                    <div class="form-group">
                        <div class="password-container">
                            <input type="password" id="signupPassword" class="form-input" placeholder="Password" required>
                            <button type="button" class="toggle-password" id="toggleSignupPassword">👁️</button>
                        </div>
                        <div id="signup-password-error" class="error-message">Password must be at least 8 characters</div>
                        <div class="password-strength" id="passwordStrength">
                            <div class="strength-bar">
                                <div class="strength-fill"></div>
                            </div>
                            <div class="strength-text">Password strength</div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="password-container">
                            <input type="password" id="confirmPassword" class="form-input" placeholder="Confirm password" required>
                            <button type="button" class="toggle-password" id="toggleConfirmPassword">👁️</button>
                        </div>
                        <div id="confirm-password-error" class="error-message">Passwords do not match</div>
                    </div>

                    <div class="terms-container">
                        <div class="checkbox-container">
                            <div class="custom-checkbox">
                                <input type="checkbox" id="terms" required>
                                <span class="checkmark"></span>
                            </div>
                            <label for="terms" class="terms-text">
                                I agree to the <a href="#">Terms of Service</a> and <a href="#">Privacy Policy</a>
                            </label>
                        </div>
                        <div id="terms-error" class="error-message">You must accept the terms and conditions</div>
                    </div>

                    <button type="submit" class="auth-btn" id="signupBtn">
                        <span class="btn-text">Create Account</span>
                        <div class="loading-spinner"></div>
                    </button>
                </form>

                <div class="divider">
                    <span>or sign up with</span>
                </div>

                <div class="social-login">
                    <button class="social-btn" id="googleSignupBtn">
                        <span>📧</span>
                        <span>Google</span>
                    </button>
                    <button class="social-btn" id="facebookSignupBtn">
                        <span>📘</span>
                        <span>Facebook</span>
                    </button>
                </div>

                <div class="switch-form">
                    Already have an account? <button type="button" id="showLogin">Sign in</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        class AuthSystem {
            constructor() {
                this.currentPanel = 'login';
                this.loginPanel = document.getElementById('loginPanel');
                this.signupPanel = document.getElementById('signupPanel');
                
                this.init();
            }

            init() {
                this.bindEvents();
                this.setupPasswordStrength();
                this.setupFormValidation();
            }

            bindEvents() {
                // Panel switching
                document.getElementById('showSignup').addEventListener('click', () => this.switchToSignup());
                document.getElementById('showLogin').addEventListener('click', () => this.switchToLogin());

                // Form submissions
                document.getElementById('loginForm').addEventListener('submit', (e) => this.handleLogin(e));
                document.getElementById('signupForm').addEventListener('submit', (e) => this.handleSignup(e));

                // Password toggles
                document.getElementById('toggleLoginPassword').addEventListener('click', () => 
                    this.togglePasswordVisibility('loginPassword', 'toggleLoginPassword'));
                document.getElementById('toggleSignupPassword').addEventListener('click', () => 
                    this.togglePasswordVisibility('signupPassword', 'toggleSignupPassword'));
                document.getElementById('toggleConfirmPassword').addEventListener('click', () => 
                    this.togglePasswordVisibility('confirmPassword', 'toggleConfirmPassword'));

                // Social login buttons
                document.getElementById('googleLoginBtn').addEventListener('click', () => this.socialAuth('Google', 'login'));
                document.getElementById('facebookLoginBtn').addEventListener('click', () => this.socialAuth('Facebook', 'login'));
                document.getElementById('googleSignupBtn').addEventListener('click', () => this.socialAuth('Google', 'signup'));
                document.getElementById('facebookSignupBtn').addEventListener('click', () => this.socialAuth('Facebook', 'signup'));
            }

            setupFormValidation() {
                // Login validation
                document.getElementById('loginEmail').addEventListener('blur', () => this.validateField('loginEmail', 'login-email'));
                document.getElementById('loginPassword').addEventListener('blur', () => this.validateField('loginPassword', 'login-password'));

                // Signup validation
                document.getElementById('firstName').addEventListener('blur', () => this.validateField('firstName'));
                document.getElementById('lastName').addEventListener('blur', () => this.validateField('lastName'));
                document.getElementById('signupEmail').addEventListener('blur', () => this.validateField('signupEmail', 'signup-email'));
                document.getElementById('signupPassword').addEventListener('blur', () => this.validateField('signupPassword', 'signup-password'));
                document.getElementById('confirmPassword').addEventListener('blur', () => this.validatePasswordMatch());

                // Clear errors on input
                ['loginEmail', 'loginPassword', 'firstName', 'lastName', 'signupEmail', 'signupPassword', 'confirmPassword'].forEach(id => {
                    const element = document.getElementById(id);
                    element.addEventListener('input', () => {
                        const errorId = id.includes('login') ? id.replace('login', 'login-').toLowerCase() : 
                                       id.includes('signup') ? id.replace('signup', 'signup-').toLowerCase() : id;
                        this.clearError(errorId);
                    });
                });
            }

            setupPasswordStrength() {
                const passwordInput = document.getElementById('signupPassword');
                const strengthIndicator = document.getElementById('passwordStrength');

                passwordInput.addEventListener('input', () => {
                    const password = passwordInput.value;
                    const strength = this.calculatePasswordStrength(password);
                    
                    strengthIndicator.className = 'password-strength';
                    if (strength.score > 0) {
                        strengthIndicator.classList.add(`strength-${strength.level}`);
                    }
                    
                    strengthIndicator.querySelector('.strength-text').textContent = strength.text;
                });
            }

            calculatePasswordStrength(password) {
                let score = 0;
                let feedback = [];

                if (password.length >= 8) score++;
                else feedback.push('at least 8 characters');

                if (/[a-z]/.test(password)) score++;
                else feedback.push('lowercase letter');

                if (/[A-Z]/.test(password)) score++;
                else feedback.push('uppercase letter');

                if (/[0-9]/.test(password)) score++;
                else feedback.push('number');

                if (/[^A-Za-z0-9]/.test(password)) score++;
                else feedback.push('special character');

                const levels = ['weak', 'weak', 'medium', 'medium', 'strong', 'strong'];
                const texts = [
                    'Too weak',
                    'Weak password',
                    'Fair password',
                    'Good password',
                    'Strong password',
                    'Very strong password'
                ];

                return {
                    score,
                    level: levels[score],
                    text: score === 0 ? 'Enter a password' : texts[score]
                };
            }

            switchToSignup() {
                this.loginPanel.classList.add('slide-out-left');
                this.signupPanel.classList.add('slide-in-right', 'active');
                this.currentPanel = 'signup';
                
                setTimeout(() => {
                    this.loginPanel.style.display = 'none';
                }, 600);
            }

            switchToLogin() {
                this.signupPanel.classList.remove('active');
                this.signupPanel.classList.add('slide-out-right');
                this.loginPanel.style.display = 'block';
                this.loginPanel.classList.remove('slide-out-left');
                this.loginPanel.classList.add('slide-in-left');
                this.currentPanel = 'login';
            }

            validateField(fieldId, errorPrefix = fieldId) {
                const field = document.getElementById(fieldId);
                const value = field.value.trim();

                switch (fieldId) {
                    case 'firstName':
                    case 'lastName':
                        if (!value) {
                            this.showError(errorPrefix, `${fieldId === 'firstName' ? 'First' : 'Last'} name is required`);
                            return false;
                        }
                        break;
                    
                    case 'loginEmail':
                    case 'signupEmail':
                        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                        if (!value || !emailRegex.test(value)) {
                            this.showError(errorPrefix, 'Please enter a valid email address');
                            return false;
                        }
                        break;
                    
                    case 'loginPassword':
                        if (value.length < 6) {
                            this.showError(errorPrefix, 'Password must be at least 6 characters');
                            return false;
                        }
                        break;
                    
                    case 'signupPassword':
                        if (value.length < 8) {
                            this.showError(errorPrefix, 'Password must be at least 8 characters');
                            return false;
                        }
                        break;
                }

                this.clearError(errorPrefix);
                return true;
            }

            validatePasswordMatch() {
                const password = document.getElementById('signupPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                if (password !== confirmPassword) {
                    this.showError('confirm-password', 'Passwords do not match');
                    return false;
                }

                this.clearError('confirm-password');
                return true;
            }

            showError(field, message) {
                const errorElement = document.getElementById(`${field}-error`);
                const inputElement = document.getElementById(field.replace('-error', '').replace('login-', 'login').replace('signup-', 'signup'));

                if (errorElement) {
                    errorElement.textContent = message;
                    errorElement.classList.add('show');
                }
                
                if (inputElement) {
                    inputElement.style.borderColor = '#ff6b6b';
                }
            }

            clearError(field) {
                const errorElement = document.getElementById(`${field}-error`);
                const inputElement = document.getElementById(field.replace('-error', '').replace('login-', 'login').replace('signup-', 'signup'));

                if (errorElement) {
                    errorElement.classList.remove('show');
                }
                
                if (inputElement) {
                    inputElement.style.borderColor = 'rgba(255, 255, 255, 0.2)';
                }
            }

            togglePasswordVisibility(inputId, buttonId) {
                const input = document.getElementById(inputId);
                const button = document.getElementById(buttonId);
                
                const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                input.setAttribute('type', type);
                button.textContent = type === 'password' ? '👁️' : '🙈';
            }

            async handleLogin(e) {
                e.preventDefault();
                
                const isEmailValid = this.validateField('loginEmail', 'login-email');
                const isPasswordValid = this.validateField('loginPassword', 'login-password');
                
                if (!isEmailValid || !isPasswordValid) return;
                
                this.setLoadingState('loginBtn', true);
                
                try {
                    await this.simulateAuth('login');
                    this.showSuccess('login');
                } catch (error) {
                    this.showError('login-password', 'Invalid credentials. Please try again.');
                } finally {
                    this.setLoadingState('loginBtn', false);
                }
            }

            async handleSignup(e) {
                e.preventDefault();
                
                const validations = [
                    this.validateField('firstName'),
                    this.validateField('lastName'),
                    this.validateField('signupEmail', 'signup-email'),
                    this.validateField('signupPassword', 'signup-password'),
                    this.validatePasswordMatch()
                ];

                const termsChecked = document.getElementById('terms').checked;
                if (!termsChecked) {
                    this.showError('terms', 'You must accept the terms and conditions');
                    validations.push(false);
                } else {
                    this.clearError('terms');
                }
                
                            if (!validations.every(Boolean)) return;
                        }
                    }
            
                    // Instantiate the AuthSystem class after the DOM is loaded
                    document.addEventListener('DOMContentLoaded', () => {
                        new AuthSystem();
                    });
                </script>
